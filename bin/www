#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('snipphub-backend:server');
const http = require('http');
const Umzug = require('umzug');

const models = require("../models");

const umzug = new Umzug({
    storage: 'sequelize',
    storageOptions: {
        sequelize: models.sequelize,
    },

    // see: https://github.com/sequelize/umzug/issues/17
    migrations: {
        params: [
            models.sequelize.getQueryInterface(), // queryInterface
            models.sequelize.constructor, // DataTypes
            function () {
                throw new Error('Migration tried to use old style "done" callback. Please upgrade to "umzug" and return a promise instead.');
            }
        ],
        path: './migrations',
        pattern: /\.js$/
    },

    logging: function () {
        console.log.apply(null, arguments);
    },
});
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

setTimeout(connectToDatabase, 20000);
// connectToDatabase();

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}

function connectToDatabase() {
    return models.sequelize.sync().then(function () {
        console.log('Connected to database. Starting migrations...');

        // First connect then execute all migrations.
        return umzug.up().then(function (result) {
            console.log('Finished migrations. Starting api...');
            server.listen(port);
            server.on('error', onError);
            server.on('listening', onListening);
        });
    }).catch(() => {
        console.log('Connection refused. Trying to reconnect in 5 seconds.');
        setTimeout(connectToDatabase, 5000);
    });
}